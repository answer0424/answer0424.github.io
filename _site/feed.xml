

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>answer</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-02-20T17:32:47+09:00</updated>
  <author>
    <name>코드로 답하다</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 코드로 답하다 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Redux</title>
    <link href="http://localhost:4000/posts/React12/" rel="alternate" type="text/html" title="Redux" />
    <published>2025-02-19T12:05:00+09:00</published>
  
    <updated>2025-02-19T15:49:12+09:00</updated>
  
    <id>http://localhost:4000/posts/React12/</id>
    <content type="text/html" src="http://localhost:4000/posts/React12/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="React" />
    
    <category term="initial" />
    
  

  <summary>Redux    React와 Redux를 함께 사용하는 방식은 React-Redux 라이브러리를 통해 연결되며, 주로 상태관리와 UI 렌더링을 효율적으로 처리하는 데 사용된다     설치    먼저 React 애플리케이션에서 Redux와 React-Redux를 설치해야 한다   npm install redux react-redux     Redux Store 설정    애플리케이션의 상태를 관리할 Redux Store를 생성한다 이 과정에서 createStore()를 사용하여 리듀서와 상태를 설정한다      리듀서 작성            리듀서는 상태를 어떻게 변경하지 정의하는 함수이다 예를 등러 간단한 카운터 상태를 관리하는 리듀서를 만들어 봅시다           // src/redux/coun...</summary>

  </entry>

  
  <entry>
    <title>변수</title>
    <link href="http://localhost:4000/posts/Java01/" rel="alternate" type="text/html" title="변수" />
    <published>2025-02-19T12:05:00+09:00</published>
  
    <updated>2025-02-19T12:05:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java01/</id>
    <content type="text/html" src="http://localhost:4000/posts/Java01/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Fundamentals" />
    
  

  <summary>변수(Variable)이란?    변수는 데이터를 저장하는 공갑(메모리)이다. Java에서는 변수를 선언할 때 데이터 타입을 명시해야 한다   int number = 10; // 정수형 변수 선언 및 초기화           위 코드에서 int는 데이터 타입, number는 변수명, 10은 변수에 저장된 값이다        데이터 타입    Java의 데이터 타입은 크게 기본형(Primitive Type) 과 참조형(Reference Type) 으로 나뉩니다.      기본형 데이터 타입(Primitive Type)            기본형 데이터 타입은 총 8가지가 있으며 값 자체를 메모리에 저장한다                          데이터 타입       크기       기본값     ...</summary>

  </entry>

  
  <entry>
    <title>Flux 패턴</title>
    <link href="http://localhost:4000/posts/React11/" rel="alternate" type="text/html" title="Flux 패턴" />
    <published>2025-02-19T10:58:00+09:00</published>
  
    <updated>2025-02-19T12:23:18+09:00</updated>
  
    <id>http://localhost:4000/posts/React11/</id>
    <content type="text/html" src="http://localhost:4000/posts/React11/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="React" />
    
    <category term="initial" />
    
  

  <summary>Flux 패턴    React 애플리케이션에서 데이터 흐름을 관리하기 위한 아키텍처 패턴 Facebook에서 개발되었으며, 단방향 데이터 흐름을 강조     Flux의 핵심 요소    Action : 상태 변경을 위한 명령을 담은 객체   Dispatcher : 액션을 받아 스토어에 전달하는 중앙 허브   Store : 애플리케이션 상태를 저장하고 관리하는 역할   View(react 컴포넌트) : 스토어에서 상태를 가져와 UI를 렌더링     Flux 데이터 흐름    사용자의 이벤트 발생 (ex. 버튼 클릭)   액션이 생성되고 디스패처에 전달된다   디스패처가 해당 액션을 스토어에 전달   스토어가 변경된 상태를 View에 반영     Flux 기본 사용법 const addTodoAction = ...</summary>

  </entry>

  
  <entry>
    <title>운동 성향 (HBTI)</title>
    <link href="http://localhost:4000/posts/HBTI/" rel="alternate" type="text/html" title="운동 성향 (HBTI)" />
    <published>2025-02-17T16:42:00+09:00</published>
  
    <updated>2025-02-17T16:42:00+09:00</updated>
  
    <id>http://localhost:4000/posts/HBTI/</id>
    <content type="text/html" src="http://localhost:4000/posts/HBTI/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="HBTI" />
    
    <category term="type" />
    
  

  <summary>MICP 힐링 러너 운동가    short description            주로 트레드밀 위에서 달리며 스트레스를 해소하고 마음의 편화를 찾는 유형           full description            MICP (Medical-Improvised-Cardio-Personal)는 건강 증진을 목표로 즉흥적인 유산소 운동을 선호하며 개인 운동을 즐기는 유형입니다. 심폐 지구력 향상과 전반적인 건강 관리에 초점을 맞추되, 정해진 계획 없이 그날의 컨디션에 따라 운동 강도를 조절하는 특징이 있습니다. 혼자만의 조깅이나 수영과 같은 개인 유산소 운동을 통해 건강 목표를 달성하는 것을 선호하며, 자신의 체력 상태를 꼼꼼히 모니터링하는 습관이 있습니다. 이들에게 추천되는 운동으로는 실내 사이...</summary>

  </entry>

  
  <entry>
    <title>Form</title>
    <link href="http://localhost:4000/posts/React10/" rel="alternate" type="text/html" title="Form" />
    <published>2025-02-14T08:40:00+09:00</published>
  
    <updated>2025-02-14T08:40:00+09:00</updated>
  
    <id>http://localhost:4000/posts/React10/</id>
    <content type="text/html" src="http://localhost:4000/posts/React10/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="React" />
    
    <category term="initial" />
    
  

  <summary>폼 상태 관리    React에서는 폼 상태를 관리하기 위해 useState 훅을 자주 사용한다     import React, { useState } from &amp;#39;react&amp;#39;;  const MyForm = () =&amp;amp;gt; {   const [name, setName] = useState(&amp;#39;&amp;#39;);    const handleChange = (event) =&amp;amp;gt; {     setName(event.target.value);   }    const handleSubmit = (event) =&amp;amp;gt; {     event.preventDefault();     alert(`Submitted Name: ${name}`);   }    return (     &amp;amp;lt;form onSubmit={handleSub...</summary>

  </entry>

</feed>


