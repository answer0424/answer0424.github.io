

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>answer</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-02-09T23:19:11+09:00</updated>
  <author>
    <name>코드로 답하다</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 코드로 답하다 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>React CSS 적용용</title>
    <link href="http://localhost:4000/posts/React03/" rel="alternate" type="text/html" title="React CSS 적용용" />
    <published>2025-02-09T23:00:00+09:00</published>
  
    <updated>2025-02-09T23:05:22+09:00</updated>
  
    <id>http://localhost:4000/posts/React03/</id>
    <content type="text/html" src="http://localhost:4000/posts/React03/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="React" />
    
    <category term="basic" />
    
  

  <summary>inline const myStyle = {   color: &amp;quot;blue&amp;quot;, };      &amp;amp;lt;div style=&amp;amp;gt;coco&amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;div style={myStyle}&amp;amp;gt;chuchu&amp;amp;lt;/div&amp;amp;gt;     외부 파일 import React from &amp;#39;react&amp;#39;; import styles from &amp;#39;./example.module.css&amp;#39;;  const Example = () =&amp;amp;gt; {     return &amp;amp;lt;div className={styles.container}&amp;amp;gt;Hello, World!&amp;amp;lt;/div&amp;amp;gt;; };  export default Example;      Styled Components import React from &amp;#39;react&amp;#39;; im...</summary>

  </entry>

  
  <entry>
    <title>JSX</title>
    <link href="http://localhost:4000/posts/React02/" rel="alternate" type="text/html" title="JSX" />
    <published>2025-02-09T22:52:00+09:00</published>
  
    <updated>2025-02-09T22:59:10+09:00</updated>
  
    <id>http://localhost:4000/posts/React02/</id>
    <content type="text/html" src="http://localhost:4000/posts/React02/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="React" />
    
    <category term="basic" />
    
  

  <summary>JSX    Java Script XML   React에서만 XML 형식의 사용이 가능하다   최초에 페이지 한 개가 로딩되고 나면 이후에 body 내용만 업데이트 되는 형태로 웹 애플리케이션이 작동한다 -&amp;amp;gt; SPA(Single Page Application)    tage 등을 사용할 수 없다     주의할 점    return 시 하나의 element만 사용 가능하다   비어 있는 태그로 감싸도 된다   변수 선언은 let, const만 사용해야 한다   JSX 안에서는 조건문 사용이 불가능하지만 삼항연산자는 사용 가능하다     function App() { // return 시 하나의 element 만 사용 가능 // 비어있는 태그로 감싸도 됨 return ( &amp;amp;lt;&amp;amp;gt;   &amp;amp;lt;h...</summary>

  </entry>

  
  <entry>
    <title>Why React</title>
    <link href="http://localhost:4000/posts/React01/" rel="alternate" type="text/html" title="Why React" />
    <published>2025-02-08T17:24:00+09:00</published>
  
    <updated>2025-02-09T22:51:39+09:00</updated>
  
    <id>http://localhost:4000/posts/React01/</id>
    <content type="text/html" src="http://localhost:4000/posts/React01/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="React" />
    
    <category term="basic" />
    
  

  <summary>웹 동작 방식 1    화면에 대한 View를 서버에서 만들어서 브라우저에게 전달   브라우저는 받은 view를 화면에 그려준다     웹 동작 방식 2    view를 받은 뒤 화면의 부분 변경이 필요한 부분을 AJAX 요청한다   JavaScript를 사용하여 AJAX 요청   주로 data를 요청하게 된다   문제점            View가 복잡한 UI일 경우 점점 어려워지고 힘들어진다       부분 변경해야 할 부분이 너무 많다       이러한 이련의 동작들이 클라이언트에서 이루어져야 하기 때문에 선능에 문제가 발생              REACT    AJAX를 사용하여 SPA를 구현하되 클라이언트 프로그래밍이 복잡해지지는 않도록 한다   데이터 변경 감지 -&amp;amp;gt; UI 자동 업데...</summary>

  </entry>

  
  <entry>
    <title>리눅스 서버</title>
    <link href="http://localhost:4000/posts/Linux25/" rel="alternate" type="text/html" title="리눅스 서버" />
    <published>2025-02-07T08:39:00+09:00</published>
  
    <updated>2025-02-07T09:16:47+09:00</updated>
  
    <id>http://localhost:4000/posts/Linux25/</id>
    <content type="text/html" src="http://localhost:4000/posts/Linux25/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="advanced" />
    
  

  <summary>talnet server    원격 시스템에 로그온하여 인터넷 또는 로컬 네트워크의 다른 컴퓨터에 액세스할 수 있게 해주는 프로그램이다      서버 프로그램 설치     dnf -y install telnet-server-1:0.17-85.el9.x86_64            클라이언트 프로그램 설치     dnf -y install telnet                환경 설정 파일 : /usr/lib/systemd/system/telnet.socket      서비스 시작 및 재시작     systemctl restart telnet.socket           클라이언트에서 접속     telnet 192.168.10.50           포트 변경            /usr/lib/...</summary>

  </entry>

  
  <entry>
    <title>디스크 쿼터</title>
    <link href="http://localhost:4000/posts/Linux24/" rel="alternate" type="text/html" title="디스크 쿼터" />
    <published>2025-02-06T08:51:00+09:00</published>
  
    <updated>2025-02-06T17:49:23+09:00</updated>
  
    <id>http://localhost:4000/posts/Linux24/</id>
    <content type="text/html" src="http://localhost:4000/posts/Linux24/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="advanced" />
    
  

  <summary>주요 개념    소프트 리밋(soft limit) : 사용자가 기본적으로 사용할 수 있는 용량으로 이 값을 초과하면 관리자가 설정한 기간 동안 초과된 용량을 사용할 수 있다   하드 리밋(hard limit) : 사용자가 사용할 수 있는 최대 용량으로 이 값을 초과하면 사용할 수 없다   I-node 제한 : 사용자나 그룹이 생성할 수 있는 파일의 개수를 제한한다     설정 방법    Quota 패키지 설치   사용자 계정 생성 : Quota를 적용할 사용자 계정을 생성   디스크 쿼터 설정 : edquota 명령어   디스크 쿼터 확인 : quota 명령어     sudo apt-get install quota sudo useradd quota_user sudo edquota -u quota_use...</summary>

  </entry>

</feed>


