

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>answer</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-03-07T14:02:08+09:00</updated>
  <author>
    <name>코드로 답하다</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 코드로 답하다 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>TCP &amp; UDP</title>
    <link href="http://localhost:4000/posts/Week01_05/" rel="alternate" type="text/html" title="TCP &amp;amp; UDP" />
    <published>2025-03-04T15:11:00+09:00</published>
  
    <updated>2025-03-04T15:11:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Week01_05/</id>
    <content type="text/html" src="http://localhost:4000/posts/Week01_05/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="week01" />
    
  

  <summary>TCP (Transmission Control Protocol)    신뢰성 있는 데이터 전송을 보장하는 연결 지향 프로토콜   주요 특징    연결 지향 : 3-way Handshake를 통해 연결을 설정한 후 데이터 전송   신뢰성 보장 : 데이터 패킷이 손실되거나 순서가 바뀌면 재전송 및 정렬을 수행   흐름 제어 : 송신자가 수신자의 처리 속도를 고려하여 데이터를 조절   혼잡 제어 : 네트워크 상태를 고려하여 전송 속도를 조절   패킷의 순서 보장 : 패킷이 순서대로 도착하도록 관리 (Sequence Number 활용)   TCP 연결 과정 (3-Way Handshake)    클라이언트 ➡️ 서버 : SYN 요청 (연결 요청)   서버 ➡️ 클라이언트 : SYN + ACK 응답 (요청 수락)...</summary>

  </entry>

  
  <entry>
    <title>Spring 동작원리</title>
    <link href="http://localhost:4000/posts/Week01_04/" rel="alternate" type="text/html" title="Spring 동작원리" />
    <published>2025-03-04T15:11:00+09:00</published>
  
    <updated>2025-03-04T15:11:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Week01_04/</id>
    <content type="text/html" src="http://localhost:4000/posts/Week01_04/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="week01" />
    
  

  <summary>중요한 개념    IoC (Inversion of Control, 제어의 역전)   DI (Dependency Injection, 의존성 주입)   AOP (Aspect-Oriented Programing, 관점 지향 프로그래밍)   PSA (Portable Service Abstraction, 범용 서비스 추상화)   POJO (Plain Old Java Object)     Ioc    기존 프로그램 흐름과 달리, 객체의 생성과 관리를 개발자가 아닌 Spring 컨테이너가 담당하는 개념   기존 방식 (IoC 적용 ❌)    개발자가 직접 객체를 생성하고 객체 간의 의존 관계를 관리함   class Car {     private Engine engine;      public Car() {    ...</summary>

  </entry>

  
  <entry>
    <title>객체 지향 4대 원칙</title>
    <link href="http://localhost:4000/posts/Week01_03/" rel="alternate" type="text/html" title="객체 지향 4대 원칙" />
    <published>2025-03-04T14:01:00+09:00</published>
  
    <updated>2025-03-05T19:08:05+09:00</updated>
  
    <id>http://localhost:4000/posts/Week01_03/</id>
    <content type="text/html" src="http://localhost:4000/posts/Week01_03/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="week01" />
    
  

  <summary>객체 지향 프로그래밍(OOP)의 4대 원칙    객체 지향 프로그래밍(Object-Oriented Programing)은 객체를 더 효율적이고 유지보수하기 쉽게 만들기 위한 개념                  원칙       설명                       캡슐화(Encapsulation)       데이터와 메서드를 하나로 묶고 외부에서 직접 접근하지 못하도록 제한                 상속(Inheritance)       기존 클래스를 재사용하여 새로운 클래스를 생성                 다형성 (Polymorphism)       같은 인터페이스를 다양한 방식으로 구현                 추상화 (Abstraction)       핵심적인 부분만 추출하여 설계...</summary>

  </entry>

  
  <entry>
    <title>Call By Value vs Call By Reference</title>
    <link href="http://localhost:4000/posts/Week01_02/" rel="alternate" type="text/html" title="Call By Value vs Call By Reference" />
    <published>2025-03-04T13:10:00+09:00</published>
  
    <updated>2025-03-05T18:15:01+09:00</updated>
  
    <id>http://localhost:4000/posts/Week01_02/</id>
    <content type="text/html" src="http://localhost:4000/posts/Week01_02/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="week01" />
    
  

  <summary>값을 전달하는 방식에 따른 분류    Call By Value(값 호출)   Call By Reference(참조 호출)     Call By Value    함수에 인자로 전달된 값의 복사본을 전달하는 방식   원본 데이터는 변경되지 않음   Java는 기본적으로 Call By Value 방식을 사용   public class CallByValueExample {     public static void changeValue(int num) {         num = 10; // num의 값만 변경 (복사본이므로 원본 영향 없음)     }      public static void main(String[] args) {         int x = 5;         changeValue(x); ...</summary>

  </entry>

  
  <entry>
    <title>JVM 구조</title>
    <link href="http://localhost:4000/posts/Week01_01/" rel="alternate" type="text/html" title="JVM 구조" />
    <published>2025-03-04T11:06:00+09:00</published>
  
    <updated>2025-03-05T17:56:45+09:00</updated>
  
    <id>http://localhost:4000/posts/Week01_01/</id>
    <content type="text/html" src="http://localhost:4000/posts/Week01_01/" />
    <author>
      <name>코드로 답하다</name>
    </author>

  
    
    <category term="Study" />
    
    <category term="week01" />
    
  

  <summary>JVM (Java Virtual Machine)    자바 프로그램을 실행하는 가상 머신으로 플랫폼 독립성을 제공하는 핵심요소이다. JVM의 주요 구성 요소는 크게 클래스 로더 시스템, 런타임 데이터 영역, 실행 엔진, 네이티브 인터페이스 로 나뉜다.       JVM 구조에 대한 이해    우리가 프로그래밍 언어로 코드를 짜도 컴퓨터는 이해하지 못한다   즉, 코드를 컴퓨터가 알아듣도록 번역(Compiled) 또는 통역(Interpreted)을 통해 컴퓨터의 언어로 바꿔줘야 한다   둘의 간단한 차이점은 번역은 컴퓨터에게 보낼 때 미리 번역 작업을 해두냐에 대한 차이이다   JVM을 요리에 비유            프로그래머 ➡️ 새로운 요리에 대한 레시피를 만듦       컴퓨터 ➡️ 국가     ...</summary>

  </entry>

</feed>


